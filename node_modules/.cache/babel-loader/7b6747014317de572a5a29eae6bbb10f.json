{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport Axios from 'axios';\nimport authHeader from '../common/authHeader';\nimport serverUrl from '../common/common';\nconst commentUrl = 'api/comment';\nexport const getAllCommentsByBlogAsync = createAsyncThunk('comment/getAllCommentsByBlogAsync', async blogID => {\n  const response = await Axios.get(`${serverUrl}${commentUrl}/get-blog-comments?blogID=${blogID}`, {\n    headers: authHeader()\n  });\n  const tasks = response.data;\n  return {\n    tasks\n  };\n}); // export const getAllcommentBySlugAsync = createAsyncThunk(\n//     'comment/getAllcommentBySlugAsync',\n//     async (slug) => {\n//         const response = await Axios.get(\n//             `${serverUrl}${commentUrl}/get-comment-by-slug?slug=${slug}`,\n//             { headers: authHeader() }\n//         );\n//         const tasks = response.data;\n//         return { tasks };\n//     }\n// );\n\nexport const createNewComment = createAsyncThunk('comment/createNewComment', async comment => {\n  console.log(comment); // const response = await Axios.post(serverUrl + commentUrl + '/add-new-comment', comment, {\n  //     headers: authHeader(),\n  // });\n\n  const tasks = response.data;\n  return {\n    tasks\n  };\n});\nconst commentSlice = createSlice({\n  name: 'comment',\n  initialState: [],\n  reducers: {},\n  extraReducers: {\n    [getAllCommentsByBlogAsync.fulfilled]: (state, action) => {\n      console.log('fetching comments successfully');\n      return action.payload.tasks.result;\n    },\n    [createNewComment.fulfilled]: (state, action) => {\n      console.log('add new comment successfully');\n      return action.payload.tasks.result;\n    }\n  }\n});\nexport const {} = commentSlice.actions;\nexport default commentSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","Axios","authHeader","serverUrl","commentUrl","getAllCommentsByBlogAsync","blogID","response","get","headers","tasks","data","createNewComment","comment","console","log","commentSlice","name","initialState","reducers","extraReducers","fulfilled","state","action","payload","result","actions","reducer"],"sources":["D:/Code/HTML/blog/BlogProject/client/src/features/comment/commentSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport Axios from 'axios';\r\nimport authHeader from '../common/authHeader';\r\nimport serverUrl from '../common/common';\r\n\r\nconst commentUrl = 'api/comment';\r\n\r\nexport const getAllCommentsByBlogAsync = createAsyncThunk(\r\n    'comment/getAllCommentsByBlogAsync',\r\n    async (blogID) => {\r\n        const response = await Axios.get(\r\n            `${serverUrl}${commentUrl}/get-blog-comments?blogID=${blogID}`,\r\n            { headers: authHeader() }\r\n        );\r\n        const tasks = response.data;\r\n        return { tasks };\r\n    }\r\n);\r\n\r\n// export const getAllcommentBySlugAsync = createAsyncThunk(\r\n//     'comment/getAllcommentBySlugAsync',\r\n//     async (slug) => {\r\n//         const response = await Axios.get(\r\n//             `${serverUrl}${commentUrl}/get-comment-by-slug?slug=${slug}`,\r\n//             { headers: authHeader() }\r\n//         );\r\n//         const tasks = response.data;\r\n//         return { tasks };\r\n//     }\r\n// );\r\n\r\nexport const createNewComment = createAsyncThunk(\r\n    'comment/createNewComment',\r\n    async (comment) => {\r\n        console.log(comment)\r\n        // const response = await Axios.post(serverUrl + commentUrl + '/add-new-comment', comment, {\r\n        //     headers: authHeader(),\r\n        // });\r\n        const tasks = response.data;\r\n        return { tasks };\r\n    }\r\n);\r\n\r\nconst commentSlice = createSlice({\r\n    name: 'comment',\r\n    initialState: [],\r\n    reducers: {},\r\n    extraReducers: {\r\n        [getAllCommentsByBlogAsync.fulfilled]: (state, action) => {\r\n            console.log('fetching comments successfully');\r\n            return action.payload.tasks.result;\r\n        },\r\n        [createNewComment.fulfilled]: (state, action) => {\r\n            console.log('add new comment successfully');\r\n            return action.payload.tasks.result;\r\n        },\r\n    },\r\n});\r\nexport const {} = commentSlice.actions;\r\nexport default commentSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,MAAMC,UAAU,GAAG,aAAnB;AAEA,OAAO,MAAMC,yBAAyB,GAAGL,gBAAgB,CACrD,mCADqD,EAErD,MAAOM,MAAP,IAAkB;EACd,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CAClB,GAAEL,SAAU,GAAEC,UAAW,6BAA4BE,MAAO,EAD1C,EAEnB;IAAEG,OAAO,EAAEP,UAAU;EAArB,CAFmB,CAAvB;EAIA,MAAMQ,KAAK,GAAGH,QAAQ,CAACI,IAAvB;EACA,OAAO;IAAED;EAAF,CAAP;AACH,CAToD,CAAlD,C,CAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,gBAAgB,GAAGZ,gBAAgB,CAC5C,0BAD4C,EAE5C,MAAOa,OAAP,IAAmB;EACfC,OAAO,CAACC,GAAR,CAAYF,OAAZ,EADe,CAEf;EACA;EACA;;EACA,MAAMH,KAAK,GAAGH,QAAQ,CAACI,IAAvB;EACA,OAAO;IAAED;EAAF,CAAP;AACH,CAT2C,CAAzC;AAYP,MAAMM,YAAY,GAAGjB,WAAW,CAAC;EAC7BkB,IAAI,EAAE,SADuB;EAE7BC,YAAY,EAAE,EAFe;EAG7BC,QAAQ,EAAE,EAHmB;EAI7BC,aAAa,EAAE;IACX,CAACf,yBAAyB,CAACgB,SAA3B,GAAuC,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACtDT,OAAO,CAACC,GAAR,CAAY,gCAAZ;MACA,OAAOQ,MAAM,CAACC,OAAP,CAAed,KAAf,CAAqBe,MAA5B;IACH,CAJU;IAKX,CAACb,gBAAgB,CAACS,SAAlB,GAA8B,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC7CT,OAAO,CAACC,GAAR,CAAY,8BAAZ;MACA,OAAOQ,MAAM,CAACC,OAAP,CAAed,KAAf,CAAqBe,MAA5B;IACH;EARU;AAJc,CAAD,CAAhC;AAeA,OAAO,MAAM,KAAKT,YAAY,CAACU,OAAxB;AACP,eAAeV,YAAY,CAACW,OAA5B"},"metadata":{},"sourceType":"module"}