{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\HTML\\\\blog\\\\BlogProject\\\\client\\\\src\\\\components\\\\Checkbox.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { animated, useSpring, config } from 'react-spring';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Checkbox(_ref) {\n  _s();\n\n  let {\n    content\n  } = _ref;\n  const [isChecked, setIsChecked] = useState(false);\n  const checkboxAnimationStyle = useSpring({\n    backgroundColor: isChecked ? '#808' : '#fff',\n    borderColor: isChecked ? '#808' : '#ddd',\n    config: config.wobbly\n  });\n  const [checkmarkLength, setCheckmarkLength] = useState(null);\n  const checkmarkAnimationStyle = useSpring({\n    x: isChecked ? 0 : checkmarkLength,\n    config: config.stiff\n  });\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      onChange: () => {\n        setIsChecked(!isChecked);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(animated.svg, {\n      style: checkboxAnimationStyle,\n      className: `checkbox ${isChecked ? 'checkbox--active' : ''}` // This element is purely decorative so\n      // we hide it for screen readers\n      ,\n      \"aria-hidden\": \"true\",\n      viewBox: \"0 0 15 11\",\n      fill: \"none\",\n      children: /*#__PURE__*/_jsxDEV(animated.path, {\n        d: \"M1 4.5L5 9L14 1\",\n        strokeWidth: \"2\",\n        stroke: isChecked ? '#fff' : 'none' // only show the checkmark when `isCheck` is `true`\n        ,\n        ref: ref => {\n          if (ref) {\n            setCheckmarkLength(ref.getTotalLength());\n          }\n        },\n        stroke: \"#fff\",\n        strokeDasharray: checkmarkLength,\n        strokeDashoffset: checkmarkAnimationStyle.x\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Checkbox, \"2NNk4d1DFNm0NwTUrsRAFsN3Gx8=\", false, function () {\n  return [useSpring, useSpring];\n});\n\n_c = Checkbox;\nexport default Checkbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkbox\");","map":{"version":3,"names":["useState","animated","useSpring","config","Checkbox","content","isChecked","setIsChecked","checkboxAnimationStyle","backgroundColor","borderColor","wobbly","checkmarkLength","setCheckmarkLength","checkmarkAnimationStyle","x","stiff","ref","getTotalLength"],"sources":["D:/Code/HTML/blog/BlogProject/client/src/components/Checkbox.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { animated, useSpring, config } from 'react-spring';\r\n\r\nfunction Checkbox({ content }) {\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const checkboxAnimationStyle = useSpring({\r\n        backgroundColor: isChecked ? '#808' : '#fff',\r\n        borderColor: isChecked ? '#808' : '#ddd',\r\n        config: config.wobbly,\r\n    });\r\n    const [checkmarkLength, setCheckmarkLength] = useState(null);\r\n    const checkmarkAnimationStyle = useSpring({\r\n        x: isChecked ? 0 : checkmarkLength,\r\n        config: config.stiff,\r\n    });\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type=\"checkbox\"\r\n                onChange={() => {\r\n                    setIsChecked(!isChecked);\r\n                }}\r\n            />\r\n            <animated.svg\r\n                style={checkboxAnimationStyle}\r\n                className={`checkbox ${isChecked ? 'checkbox--active' : ''}`}\r\n                // This element is purely decorative so\r\n                // we hide it for screen readers\r\n                aria-hidden=\"true\"\r\n                viewBox=\"0 0 15 11\"\r\n                fill=\"none\"\r\n            >\r\n                <animated.path\r\n                    d=\"M1 4.5L5 9L14 1\"\r\n                    strokeWidth=\"2\"\r\n                    stroke={isChecked ? '#fff' : 'none'} // only show the checkmark when `isCheck` is `true`\r\n                    ref={(ref) => {\r\n                        if (ref) {\r\n                            setCheckmarkLength(ref.getTotalLength());\r\n                        }\r\n                    }}\r\n                    stroke=\"#fff\"\r\n                    strokeDasharray={checkmarkLength}\r\n                    strokeDashoffset={checkmarkAnimationStyle.x}\r\n                />\r\n            </animated.svg>\r\n            {content}\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default Checkbox;\r\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,cAA5C;;;AAEA,SAASC,QAAT,OAA+B;EAAA;;EAAA,IAAb;IAAEC;EAAF,CAAa;EAC3B,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAMQ,sBAAsB,GAAGN,SAAS,CAAC;IACrCO,eAAe,EAAEH,SAAS,GAAG,MAAH,GAAY,MADD;IAErCI,WAAW,EAAEJ,SAAS,GAAG,MAAH,GAAY,MAFG;IAGrCH,MAAM,EAAEA,MAAM,CAACQ;EAHsB,CAAD,CAAxC;EAKA,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,IAAD,CAAtD;EACA,MAAMc,uBAAuB,GAAGZ,SAAS,CAAC;IACtCa,CAAC,EAAET,SAAS,GAAG,CAAH,GAAOM,eADmB;IAEtCT,MAAM,EAAEA,MAAM,CAACa;EAFuB,CAAD,CAAzC;EAKA,oBACI;IAAA,wBACI;MACI,IAAI,EAAC,UADT;MAEI,QAAQ,EAAE,MAAM;QACZT,YAAY,CAAC,CAACD,SAAF,CAAZ;MACH;IAJL;MAAA;MAAA;MAAA;IAAA,QADJ,eAOI,QAAC,QAAD,CAAU,GAAV;MACI,KAAK,EAAEE,sBADX;MAEI,SAAS,EAAG,YAAWF,SAAS,GAAG,kBAAH,GAAwB,EAAG,EAF/D,CAGI;MACA;MAJJ;MAKI,eAAY,MALhB;MAMI,OAAO,EAAC,WANZ;MAOI,IAAI,EAAC,MAPT;MAAA,uBASI,QAAC,QAAD,CAAU,IAAV;QACI,CAAC,EAAC,iBADN;QAEI,WAAW,EAAC,GAFhB;QAGI,MAAM,EAAEA,SAAS,GAAG,MAAH,GAAY,MAHjC,CAGyC;QAHzC;QAII,GAAG,EAAGW,GAAD,IAAS;UACV,IAAIA,GAAJ,EAAS;YACLJ,kBAAkB,CAACI,GAAG,CAACC,cAAJ,EAAD,CAAlB;UACH;QACJ,CARL;QASI,MAAM,EAAC,MATX;QAUI,eAAe,EAAEN,eAVrB;QAWI,gBAAgB,EAAEE,uBAAuB,CAACC;MAX9C;QAAA;QAAA;QAAA;MAAA;IATJ;MAAA;MAAA;MAAA;IAAA,QAPJ,EA8BKV,OA9BL;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAkCH;;GA/CQD,Q;UAE0BF,S,EAMCA,S;;;KAR3BE,Q;AAiDT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}