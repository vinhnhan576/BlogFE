{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Axios from \"axios\";\nexport const authenticateUserAsync = createAsyncThunk(\"auth/authenticateUserAsync\", async user => {\n  console.log();\n  const response = await Axios.post(\"https://blogprojectpbl3.herokuapp.com/auth\", user);\n  const tasks = response.data;\n  return {\n    tasks\n  };\n});\nexport const createNewAccountAsync = createAsyncThunk(\"api/user/createNewAccountAsync\", async _ref => {\n  let {\n    account\n  } = _ref;\n  const response = await Axios.post(\"https://blogprojectpbl3.herokuapp.com/api/account\", account);\n  const tasks = response.data;\n  return {\n    tasks\n  };\n});\nexport const accountSlice = createSlice({\n  name: \"account\",\n  initialState: {\n    account: null\n  },\n  reducers: {\n    // login: (state, action) => {\n    // \tconst data = {\n    // \t\tusername: action.payload.username,\n    // \t\tpassword: action.payload.password,\n    // \t};\n    // \tAxios.post(\"http://localhost:5000/auth\", { data })\n    // \t\t.then((res) => {\n    // \t\t\tif (res) {\n    // \t\t\t\tstate.account = action.payload;\n    // \t\t\t\tconsole.log(state.account);\n    // \t\t\t} else state.account = null;\n    // \t\t})\n    // \t\t.catch((error) => {\n    // \t\t\tconsole.log(error);\n    // \t\t});\n    // },\n    logout: state => {\n      state.account = null;\n    }\n  },\n  extraReducers: {\n    [authenticateUserAsync.fulfilled]: (state, action) => {\n      console.log(\"authenticate user successfully\");\n      if (action.payload.tasks) state.account = action.payload.tasks;else state.account = null;\n      console.log(state.account);\n    },\n    [createNewAccountAsync.fulfilled]: (state, action) => {\n      console.log(\"added new account successfully\");\n      return action.payload.tasks;\n    }\n  }\n});\nexport const {\n  logout\n} = accountSlice.actions;\nexport const selectAccount = state => state.account.account;\nexport default accountSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","Axios","authenticateUserAsync","user","console","log","response","post","tasks","data","createNewAccountAsync","account","accountSlice","name","initialState","reducers","logout","state","extraReducers","fulfilled","action","payload","actions","selectAccount","reducer"],"sources":["D:/Code/HTML/BlogProject/client/src/features/account/accountSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport Axios from \"axios\";\r\n\r\nexport const authenticateUserAsync = createAsyncThunk(\r\n\t\"auth/authenticateUserAsync\",\r\n\tasync (user) => {\r\n\t\tconsole.log();\r\n\t\tconst response = await Axios.post(\r\n\t\t\t\"https://blogprojectpbl3.herokuapp.com/auth\",\r\n\t\t\tuser\r\n\t\t);\r\n\t\tconst tasks = response.data;\r\n\t\treturn { tasks };\r\n\t}\r\n);\r\n\r\nexport const createNewAccountAsync = createAsyncThunk(\r\n\t\"api/user/createNewAccountAsync\",\r\n\tasync ({account}) => {\r\n\t\tconst response = await Axios.post(\r\n\t\t\t\"https://blogprojectpbl3.herokuapp.com/api/account\",\r\n\t\t\taccount\r\n\t\t);\r\n\t\tconst tasks = response.data;\r\n\t\treturn { tasks };\r\n\t}\r\n);\r\n\r\nexport const accountSlice = createSlice({\r\n\tname: \"account\",\r\n\tinitialState: {\r\n\t\taccount: null,\r\n\t},\r\n\treducers: {\r\n\t\t// login: (state, action) => {\r\n\t\t// \tconst data = {\r\n\t\t// \t\tusername: action.payload.username,\r\n\t\t// \t\tpassword: action.payload.password,\r\n\t\t// \t};\r\n\t\t// \tAxios.post(\"http://localhost:5000/auth\", { data })\r\n\t\t// \t\t.then((res) => {\r\n\t\t// \t\t\tif (res) {\r\n\t\t// \t\t\t\tstate.account = action.payload;\r\n\t\t// \t\t\t\tconsole.log(state.account);\r\n\t\t// \t\t\t} else state.account = null;\r\n\t\t// \t\t})\r\n\t\t// \t\t.catch((error) => {\r\n\t\t// \t\t\tconsole.log(error);\r\n\t\t// \t\t});\r\n\t\t// },\r\n\t\tlogout: (state) => {\r\n\t\t\tstate.account = null;\r\n\t\t},\r\n\t},\r\n\textraReducers: {\r\n\t\t[authenticateUserAsync.fulfilled]: (state, action) => {\r\n\t\t\tconsole.log(\"authenticate user successfully\");\r\n\t\t\tif (action.payload.tasks) state.account = action.payload.tasks;\r\n\t\t\telse state.account = null;\r\n\t\t\tconsole.log(state.account);\r\n\t\t},\r\n\t\t[createNewAccountAsync.fulfilled]: (state, action) => {\r\n\t\t\tconsole.log(\"added new account successfully\");\r\n\t\t\treturn action.payload.tasks;\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport const { logout } = accountSlice.actions;\r\n\r\nexport const selectAccount = (state) => state.account.account;\r\n\r\nexport default accountSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,qBAAqB,GAAGF,gBAAgB,CACpD,4BADoD,EAEpD,MAAOG,IAAP,IAAgB;EACfC,OAAO,CAACC,GAAR;EACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CACtB,4CADsB,EAEtBJ,IAFsB,CAAvB;EAIA,MAAMK,KAAK,GAAGF,QAAQ,CAACG,IAAvB;EACA,OAAO;IAAED;EAAF,CAAP;AACA,CAVmD,CAA9C;AAaP,OAAO,MAAME,qBAAqB,GAAGV,gBAAgB,CACpD,gCADoD,EAEpD,cAAqB;EAAA,IAAd;IAACW;EAAD,CAAc;EACpB,MAAML,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CACtB,mDADsB,EAEtBI,OAFsB,CAAvB;EAIA,MAAMH,KAAK,GAAGF,QAAQ,CAACG,IAAvB;EACA,OAAO;IAAED;EAAF,CAAP;AACA,CATmD,CAA9C;AAYP,OAAO,MAAMI,YAAY,GAAGb,WAAW,CAAC;EACvCc,IAAI,EAAE,SADiC;EAEvCC,YAAY,EAAE;IACbH,OAAO,EAAE;EADI,CAFyB;EAKvCI,QAAQ,EAAE;IACT;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,MAAM,EAAGC,KAAD,IAAW;MAClBA,KAAK,CAACN,OAAN,GAAgB,IAAhB;IACA;EAnBQ,CAL6B;EA0BvCO,aAAa,EAAE;IACd,CAAChB,qBAAqB,CAACiB,SAAvB,GAAmC,CAACF,KAAD,EAAQG,MAAR,KAAmB;MACrDhB,OAAO,CAACC,GAAR,CAAY,gCAAZ;MACA,IAAIe,MAAM,CAACC,OAAP,CAAeb,KAAnB,EAA0BS,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,OAAP,CAAeb,KAA/B,CAA1B,KACKS,KAAK,CAACN,OAAN,GAAgB,IAAhB;MACLP,OAAO,CAACC,GAAR,CAAYY,KAAK,CAACN,OAAlB;IACA,CANa;IAOd,CAACD,qBAAqB,CAACS,SAAvB,GAAmC,CAACF,KAAD,EAAQG,MAAR,KAAmB;MACrDhB,OAAO,CAACC,GAAR,CAAY,gCAAZ;MACA,OAAOe,MAAM,CAACC,OAAP,CAAeb,KAAtB;IACA;EAVa;AA1BwB,CAAD,CAAhC;AAwCP,OAAO,MAAM;EAAEQ;AAAF,IAAaJ,YAAY,CAACU,OAAhC;AAEP,OAAO,MAAMC,aAAa,GAAIN,KAAD,IAAWA,KAAK,CAACN,OAAN,CAAcA,OAA/C;AAEP,eAAeC,YAAY,CAACY,OAA5B"},"metadata":{},"sourceType":"module"}