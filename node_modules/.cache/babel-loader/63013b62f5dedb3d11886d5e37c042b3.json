{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport Axios from 'axios';\nimport setAuthToken from '../../setAuthToken';\nimport authHeader from '../common/authHeader';\nimport serverUrl from '../common/common';\nconst accountUrl = 'api/account';\nexport const setCurrentUser = decoded => {\n  return {\n    payload: decoded\n  };\n};\nexport const authenticateUserAsync = createAsyncThunk('auth/authenticateUserAsync', async user => {\n  const response = await Axios.post(serverUrl + 'auth/login', user);\n  const tasks = response.data;\n  return {\n    tasks\n  };\n});\nexport const createNewAccountAsync = createAsyncThunk('api/user/createNewAccountAsync', async _ref => {\n  let {\n    account\n  } = _ref;\n  const response = await Axios.post(serverUrl + accountUrl, account);\n  const tasks = response.data;\n  return {\n    tasks\n  };\n});\nexport const accountSlice = createSlice({\n  name: 'account',\n  initialState: {\n    account: null\n  },\n  reducers: {\n    // login: (state, action) => {\n    // \tconst data = {\n    // \t\tusername: action.payload.username,\n    // \t\tpassword: action.payload.password,\n    // \t};\n    // \tAxios.post(\"http://localhost:5000/auth\", { data })\n    // \t\t.then((res) => {\n    // \t\t\tif (res) {\n    // \t\t\t\tstate.account = action.payload;\n    // \t\t\t\tconsole.log(state.account);\n    // \t\t\t} else state.account = null;\n    // \t\t})\n    // \t\t.catch((error) => {\n    // \t\t\tconsole.log(error);\n    // \t\t});\n    // },\n    logout: state => {\n      localStorage.setItem('user', null);\n      state.account = null;\n      state.user = null;\n    }\n  },\n  extraReducers: {\n    [authenticateUserAsync.fulfilled]: (state, action) => {\n      console.log('Authenticated user successfully');\n      const account = action.payload.tasks;\n      localStorage.setItem('user', JSON.stringify(account));\n      console.log(account); // setAuthToken(token);\n\n      if (action.payload.tasks) state.account = action.payload.tasks.account;else state.account = null;\n    },\n    [createNewAccountAsync.fulfilled]: (state, action) => {\n      console.log('Created new account successfully');\n      return action.payload.tasks.result;\n    }\n  }\n});\nexport const {\n  logout\n} = accountSlice.actions;\nexport const selectAccount = state => state.account.account;\nexport default accountSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","Axios","setAuthToken","authHeader","serverUrl","accountUrl","setCurrentUser","decoded","payload","authenticateUserAsync","user","response","post","tasks","data","createNewAccountAsync","account","accountSlice","name","initialState","reducers","logout","state","localStorage","setItem","extraReducers","fulfilled","action","console","log","JSON","stringify","result","actions","selectAccount","reducer"],"sources":["D:/Code/HTML/blog/BlogProject/client/src/features/account/accountSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport Axios from 'axios';\r\nimport setAuthToken from '../../setAuthToken';\r\nimport authHeader from '../common/authHeader';\r\nimport serverUrl from '../common/common';\r\n\r\nconst accountUrl = 'api/account';\r\n\r\nexport const setCurrentUser = (decoded) => {\r\n    return {\r\n        payload: decoded,\r\n    };\r\n};\r\n\r\nexport const authenticateUserAsync = createAsyncThunk(\r\n    'auth/authenticateUserAsync',\r\n    async (user) => {\r\n        const response = await Axios.post(serverUrl + 'auth/login', user);\r\n        const tasks = response.data;\r\n        return { tasks };\r\n    }\r\n);\r\n\r\nexport const createNewAccountAsync = createAsyncThunk(\r\n    'api/user/createNewAccountAsync',\r\n    async ({ account }) => {\r\n        const response = await Axios.post(serverUrl + accountUrl, account);\r\n        const tasks = response.data;\r\n        return { tasks };\r\n    }\r\n);\r\n\r\nexport const accountSlice = createSlice({\r\n    name: 'account',\r\n    initialState: {\r\n        account: null,\r\n    },\r\n    reducers: {\r\n        // login: (state, action) => {\r\n        // \tconst data = {\r\n        // \t\tusername: action.payload.username,\r\n        // \t\tpassword: action.payload.password,\r\n        // \t};\r\n        // \tAxios.post(\"http://localhost:5000/auth\", { data })\r\n        // \t\t.then((res) => {\r\n        // \t\t\tif (res) {\r\n        // \t\t\t\tstate.account = action.payload;\r\n        // \t\t\t\tconsole.log(state.account);\r\n        // \t\t\t} else state.account = null;\r\n        // \t\t})\r\n        // \t\t.catch((error) => {\r\n        // \t\t\tconsole.log(error);\r\n        // \t\t});\r\n        // },\r\n        logout: (state) => {\r\n            localStorage.setItem('user', null)\r\n            state.account = null;\r\n            state.user = null;\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [authenticateUserAsync.fulfilled]: (state, action) => {\r\n            console.log('Authenticated user successfully');\r\n            const account = action.payload.tasks;\r\n            localStorage.setItem('user', JSON.stringify(account));\r\n            console.log(account)\r\n            // setAuthToken(token);\r\n            if (action.payload.tasks)\r\n                state.account = action.payload.tasks.account;\r\n            else state.account = null;\r\n        },\r\n        [createNewAccountAsync.fulfilled]: (state, action) => {\r\n            console.log('Created new account successfully');\r\n            return action.payload.tasks.result;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { logout } = accountSlice.actions;\r\n\r\nexport const selectAccount = (state) => state.account.account;\r\n\r\nexport default accountSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,MAAMC,UAAU,GAAG,aAAnB;AAEA,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAAa;EACvC,OAAO;IACHC,OAAO,EAAED;EADN,CAAP;AAGH,CAJM;AAMP,OAAO,MAAME,qBAAqB,GAAGT,gBAAgB,CACjD,4BADiD,EAEjD,MAAOU,IAAP,IAAgB;EACZ,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAWR,SAAS,GAAG,YAAvB,EAAqCM,IAArC,CAAvB;EACA,MAAMG,KAAK,GAAGF,QAAQ,CAACG,IAAvB;EACA,OAAO;IAAED;EAAF,CAAP;AACH,CANgD,CAA9C;AASP,OAAO,MAAME,qBAAqB,GAAGf,gBAAgB,CACjD,gCADiD,EAEjD,cAAuB;EAAA,IAAhB;IAAEgB;EAAF,CAAgB;EACnB,MAAML,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAWR,SAAS,GAAGC,UAAvB,EAAmCW,OAAnC,CAAvB;EACA,MAAMH,KAAK,GAAGF,QAAQ,CAACG,IAAvB;EACA,OAAO;IAAED;EAAF,CAAP;AACH,CANgD,CAA9C;AASP,OAAO,MAAMI,YAAY,GAAGlB,WAAW,CAAC;EACpCmB,IAAI,EAAE,SAD8B;EAEpCC,YAAY,EAAE;IACVH,OAAO,EAAE;EADC,CAFsB;EAKpCI,QAAQ,EAAE;IACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,MAAM,EAAGC,KAAD,IAAW;MACfC,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6B,IAA7B;MACAF,KAAK,CAACN,OAAN,GAAgB,IAAhB;MACAM,KAAK,CAACZ,IAAN,GAAa,IAAb;IACH;EArBK,CAL0B;EA4BpCe,aAAa,EAAE;IACX,CAAChB,qBAAqB,CAACiB,SAAvB,GAAmC,CAACJ,KAAD,EAAQK,MAAR,KAAmB;MAClDC,OAAO,CAACC,GAAR,CAAY,iCAAZ;MACA,MAAMb,OAAO,GAAGW,MAAM,CAACnB,OAAP,CAAeK,KAA/B;MACAU,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BM,IAAI,CAACC,SAAL,CAAef,OAAf,CAA7B;MACAY,OAAO,CAACC,GAAR,CAAYb,OAAZ,EAJkD,CAKlD;;MACA,IAAIW,MAAM,CAACnB,OAAP,CAAeK,KAAnB,EACIS,KAAK,CAACN,OAAN,GAAgBW,MAAM,CAACnB,OAAP,CAAeK,KAAf,CAAqBG,OAArC,CADJ,KAEKM,KAAK,CAACN,OAAN,GAAgB,IAAhB;IACR,CAVU;IAWX,CAACD,qBAAqB,CAACW,SAAvB,GAAmC,CAACJ,KAAD,EAAQK,MAAR,KAAmB;MAClDC,OAAO,CAACC,GAAR,CAAY,kCAAZ;MACA,OAAOF,MAAM,CAACnB,OAAP,CAAeK,KAAf,CAAqBmB,MAA5B;IACH;EAdU;AA5BqB,CAAD,CAAhC;AA8CP,OAAO,MAAM;EAAEX;AAAF,IAAaJ,YAAY,CAACgB,OAAhC;AAEP,OAAO,MAAMC,aAAa,GAAIZ,KAAD,IAAWA,KAAK,CAACN,OAAN,CAAcA,OAA/C;AAEP,eAAeC,YAAY,CAACkB,OAA5B"},"metadata":{},"sourceType":"module"}