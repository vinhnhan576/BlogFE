{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\HTML\\\\blog\\\\BlogProject\\\\client\\\\src\\\\components\\\\Checkbox.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { animated, useSpring, config, useSpringRef, useChain } from 'react-spring';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Checkbox(_ref) {\n  _s();\n\n  let {\n    content,\n    checked\n  } = _ref;\n  const [isChecked, setIsChecked] = useState(false);\n  checked = isChecked;\n  const checkboxAnimationRef = useSpringRef();\n  const checkboxAnimationStyle = useSpring({\n    backgroundColor: isChecked ? '#553624' : 'transparent',\n    borderColor: isChecked ? '#553624' : 'rgb(184, 184, 184)',\n    config: config.gentle,\n    ref: checkboxAnimationRef\n  });\n  const checkmarkAnimationRef = useSpringRef();\n  const [checkmarkLength, setCheckmarkLength] = useState(null);\n  const checkmarkAnimationStyle = useSpring({\n    x: isChecked ? 0 : checkmarkLength,\n    config: config.wobbly,\n    ref: checkmarkAnimationRef\n  });\n  useChain(isChecked ? [checkboxAnimationRef, checkmarkAnimationRef] : [checkmarkAnimationRef, checkboxAnimationRef], [0, 0.12] // -> delay by 0.1 seconds\n  );\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    className: `checkbox__label ${isChecked ? 'checkbox--active__label' : ''}`,\n    children: [content, /*#__PURE__*/_jsxDEV(animated.svg, {\n      style: checkboxAnimationStyle,\n      className: `checkbox ${isChecked ? 'checkbox--active' : ''}` // This element is purely decorative so\n      // we hide it for screen readers\n      ,\n      \"aria-hidden\": \"true\",\n      viewBox: \"0 0 15 11\",\n      fill: \"none\",\n      children: /*#__PURE__*/_jsxDEV(animated.path, {\n        d: \"M1 4.5L5 9L14 1\",\n        strokeWidth: \"2\" // stroke={isChecked ? '#fff' : 'none'} // only show the checkmark when `isCheck` is `true`\n        ,\n        ref: ref => {\n          if (ref) {\n            setCheckmarkLength(ref.getTotalLength());\n          }\n        },\n        stroke: \"#fff\",\n        strokeDasharray: checkmarkLength,\n        strokeDashoffset: checkmarkAnimationStyle.x\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      onChange: () => {\n        setIsChecked(!isChecked);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Checkbox, \"4BF6ecnQvgmSUbdQCi304P7vkow=\", false, function () {\n  return [useSpringRef, useSpring, useSpringRef, useSpring, useChain];\n});\n\n_c = Checkbox;\nexport default Checkbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkbox\");","map":{"version":3,"names":["useState","animated","useSpring","config","useSpringRef","useChain","Checkbox","content","checked","isChecked","setIsChecked","checkboxAnimationRef","checkboxAnimationStyle","backgroundColor","borderColor","gentle","ref","checkmarkAnimationRef","checkmarkLength","setCheckmarkLength","checkmarkAnimationStyle","x","wobbly","getTotalLength"],"sources":["D:/Code/HTML/blog/BlogProject/client/src/components/Checkbox.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport {\r\n    animated,\r\n    useSpring,\r\n    config,\r\n    useSpringRef,\r\n    useChain,\r\n} from 'react-spring';\r\n\r\nfunction Checkbox({ content, checked }) {\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    checked = isChecked;\r\n    const checkboxAnimationRef = useSpringRef();\r\n    const checkboxAnimationStyle = useSpring({\r\n        backgroundColor: isChecked ? '#553624' : 'transparent',\r\n        borderColor: isChecked ? '#553624' : 'rgb(184, 184, 184)',\r\n        config: config.gentle,\r\n        ref: checkboxAnimationRef,\r\n    });\r\n\r\n    const checkmarkAnimationRef = useSpringRef();\r\n    const [checkmarkLength, setCheckmarkLength] = useState(null);\r\n    const checkmarkAnimationStyle = useSpring({\r\n        x: isChecked ? 0 : checkmarkLength,\r\n        config: config.wobbly,\r\n        ref: checkmarkAnimationRef,\r\n    });\r\n\r\n    useChain(\r\n        isChecked\r\n            ? [checkboxAnimationRef, checkmarkAnimationRef]\r\n            : [checkmarkAnimationRef, checkboxAnimationRef],\r\n        [0, 0.12] // -> delay by 0.1 seconds\r\n    );\r\n\r\n    return (\r\n        <label\r\n            className={`checkbox__label ${\r\n                isChecked ? 'checkbox--active__label' : ''\r\n            }`}\r\n        >\r\n            {content}\r\n            <animated.svg\r\n                style={checkboxAnimationStyle}\r\n                className={`checkbox ${isChecked ? 'checkbox--active' : ''}`}\r\n                // This element is purely decorative so\r\n                // we hide it for screen readers\r\n                aria-hidden=\"true\"\r\n                viewBox=\"0 0 15 11\"\r\n                fill=\"none\"\r\n            >\r\n                <animated.path\r\n                    d=\"M1 4.5L5 9L14 1\"\r\n                    strokeWidth=\"2\"\r\n                    // stroke={isChecked ? '#fff' : 'none'} // only show the checkmark when `isCheck` is `true`\r\n                    ref={(ref) => {\r\n                        if (ref) {\r\n                            setCheckmarkLength(ref.getTotalLength());\r\n                        }\r\n                    }}\r\n                    stroke=\"#fff\"\r\n                    strokeDasharray={checkmarkLength}\r\n                    strokeDashoffset={checkmarkAnimationStyle.x}\r\n                />\r\n            </animated.svg>\r\n            <input\r\n                type=\"checkbox\"\r\n                onChange={() => {\r\n                    setIsChecked(!isChecked);\r\n                }}\r\n            />\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default Checkbox;\r\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SACIC,QADJ,EAEIC,SAFJ,EAGIC,MAHJ,EAIIC,YAJJ,EAKIC,QALJ,QAMO,cANP;;;AAQA,SAASC,QAAT,OAAwC;EAAA;;EAAA,IAAtB;IAAEC,OAAF;IAAWC;EAAX,CAAsB;EACpC,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;EACAQ,OAAO,GAAGC,SAAV;EACA,MAAME,oBAAoB,GAAGP,YAAY,EAAzC;EACA,MAAMQ,sBAAsB,GAAGV,SAAS,CAAC;IACrCW,eAAe,EAAEJ,SAAS,GAAG,SAAH,GAAe,aADJ;IAErCK,WAAW,EAAEL,SAAS,GAAG,SAAH,GAAe,oBAFA;IAGrCN,MAAM,EAAEA,MAAM,CAACY,MAHsB;IAIrCC,GAAG,EAAEL;EAJgC,CAAD,CAAxC;EAOA,MAAMM,qBAAqB,GAAGb,YAAY,EAA1C;EACA,MAAM,CAACc,eAAD,EAAkBC,kBAAlB,IAAwCnB,QAAQ,CAAC,IAAD,CAAtD;EACA,MAAMoB,uBAAuB,GAAGlB,SAAS,CAAC;IACtCmB,CAAC,EAAEZ,SAAS,GAAG,CAAH,GAAOS,eADmB;IAEtCf,MAAM,EAAEA,MAAM,CAACmB,MAFuB;IAGtCN,GAAG,EAAEC;EAHiC,CAAD,CAAzC;EAMAZ,QAAQ,CACJI,SAAS,GACH,CAACE,oBAAD,EAAuBM,qBAAvB,CADG,GAEH,CAACA,qBAAD,EAAwBN,oBAAxB,CAHF,EAIJ,CAAC,CAAD,EAAI,IAAJ,CAJI,CAIM;EAJN,CAAR;EAOA,oBACI;IACI,SAAS,EAAG,mBACRF,SAAS,GAAG,yBAAH,GAA+B,EAC3C,EAHL;IAAA,WAKKF,OALL,eAMI,QAAC,QAAD,CAAU,GAAV;MACI,KAAK,EAAEK,sBADX;MAEI,SAAS,EAAG,YAAWH,SAAS,GAAG,kBAAH,GAAwB,EAAG,EAF/D,CAGI;MACA;MAJJ;MAKI,eAAY,MALhB;MAMI,OAAO,EAAC,WANZ;MAOI,IAAI,EAAC,MAPT;MAAA,uBASI,QAAC,QAAD,CAAU,IAAV;QACI,CAAC,EAAC,iBADN;QAEI,WAAW,EAAC,GAFhB,CAGI;QAHJ;QAII,GAAG,EAAGO,GAAD,IAAS;UACV,IAAIA,GAAJ,EAAS;YACLG,kBAAkB,CAACH,GAAG,CAACO,cAAJ,EAAD,CAAlB;UACH;QACJ,CARL;QASI,MAAM,EAAC,MATX;QAUI,eAAe,EAAEL,eAVrB;QAWI,gBAAgB,EAAEE,uBAAuB,CAACC;MAX9C;QAAA;QAAA;QAAA;MAAA;IATJ;MAAA;MAAA;MAAA;IAAA,QANJ,eA6BI;MACI,IAAI,EAAC,UADT;MAEI,QAAQ,EAAE,MAAM;QACZX,YAAY,CAAC,CAACD,SAAF,CAAZ;MACH;IAJL;MAAA;MAAA;MAAA;IAAA,QA7BJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAsCH;;GAhEQH,Q;UAGwBF,Y,EACEF,S,EAODE,Y,EAEEF,S,EAMhCG,Q;;;KAnBKC,Q;AAkET,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}